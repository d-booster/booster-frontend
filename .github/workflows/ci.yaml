name: CI workflow

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read .node-version
        run: echo "NODE_VERSION=$(cat .node-version)" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # package-lock.json や node-version が変更されない限りキャッシュを利用する
      - name: Cache Node.js modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules # npm が依存関係を保存する場所
          key: ${{ runner.os }}-node-${{ hashFiles('**/.node-version') }}-${{ hashFiles('**/package-lock.json') }} # キャッシュのキー
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('**/.node-version') }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies if cache is not hit
        shell: bash
        run: |
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" != "true" ]; then
            npm ci
          else
            echo "skip npm clean-install"
          fi

      - name: Run lint and format
        run: npm run check

      - name: Run build command
        run: npm run build

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase db start
      - run: supabase db lint
      - run: supabase test db

      - name: Verify generated types are checked in
        run: |
          supabase gen types typescript --local > src/types/supabase.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet src/types/supabase.gen.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

  dryrun:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ github.base_ref == 'main' && secrets.PRODUCTION_DB_PASSWORD || secrets.STAGING_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ github.base_ref == 'main' && secrets.PRODUCTION_PROJECT_ID || secrets.STAGING_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push --dry-run

  deploy-preview:
    needs: [build]
    uses: ./.github/workflows/deploy.yaml
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
